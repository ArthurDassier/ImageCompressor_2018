
==================== FINAL INTERFACE ====================
2019-03-25 09:30:20.323550649 UTC

interface deBruijn-0.1.0.0-3y7lalbVcR6Jq5mG6ZfyWc:Check 8044
  interface hash: 51e9c3a79ffd6cd9d1387c9f84eb3114
  ABI hash: a8ee2e41451030615b8a5a1f946b1982
  export-list hash: 6a911ebbfd2dd9907ebedf619d42bbb1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 476b4d20104f1cac6d0ddc47500bed3d
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Check.check
  Check.checkAlpha
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
ea758b29803fc1bb4e55a226972464bb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Check.$trModule3 Check.$trModule1) -}
3ae1c652f0f9a752214f0b3464297040
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Check.$trModule2) -}
cc42dff8c02a76e80961537b0c474fc7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Check"#) -}
3cfd1bc22f01cc6ceb9963074036e622
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Check.$trModule4) -}
aa59d418677540be3f1bc5a99aa67c8d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("deBruijn-0.1.0.0-3y7lalbVcR6Jq5mG6ZfyWc"#) -}
d0f2919629f11bf9a3752de040238a1c
  $wcheck ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U(U)><L,U><S,1*U>,
     Inline: [0] -}
ea7179f6e4ba719d51c0fb3262a90269
  check ::
    GHC.Base.String
    -> [GHC.Base.String]
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 5, Strictness: <L,U><L,U><L,1*U(U)><L,U><S(S),1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: [GHC.Base.String])
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Types.Int) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 Check.$wcheck w w1 w2 w3 ww1 }) -}
3271033f3ce9a214b5d8afd4c6840487
  checkAlpha :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: (\ (alpha :: GHC.Base.String)
                   (seq :: GHC.Base.String) ->
                 case GHC.Classes.$fEqModule_$s$c==
                        (GHC.List.filter
                           @ GHC.Types.Char
                           (\ (x :: GHC.Types.Char) ->
                            GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar x alpha)
                           seq)
                        seq of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEqModule_$s$c==
                        (GHC.List.filter
                           @ GHC.Types.Char
                           (\ (x :: GHC.Types.Char) ->
                            GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar x seq)
                           alpha)
                        alpha }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

